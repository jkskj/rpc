// Code generated by Kitex v0.8.0. DO NOT EDIT.

package test

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	test "rpc/kitex_gen/test"
)

func serviceInfo() *kitex.ServiceInfo {
	return testServiceInfo
}

var testServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "test"
	handlerType := (*test.Test)(nil)
	methods := map[string]kitex.MethodInfo{
		"test": kitex.NewMethodInfo(testHandler, newTestTestArgs, newTestTestResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "test",
		"ServiceFilePath": `idl\test.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func testHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*test.TestTestArgs)
	realResult := result.(*test.TestTestResult)
	success, err := handler.(test.Test).Test(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTestTestArgs() interface{} {
	return test.NewTestTestArgs()
}

func newTestTestResult() interface{} {
	return test.NewTestTestResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Test(ctx context.Context, req string) (r string, err error) {
	var _args test.TestTestArgs
	_args.Req = req
	var _result test.TestTestResult
	if err = p.c.Call(ctx, "test", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
